1.
Task-1: Initialize a Git repository for your JavaScript project.
mkdir my-js-project
cd my-js-project
git init

Task-2: Create a file named script.js with a simple JavaScript function.
echo "function sayHello() { console.log('Hello, World!'); }" > script.js

Task-3: Add and commit the changes.
git add script.js
git commit -m "Add initial sayHello function"


2.
Task-1: Create a new branch named feature-greeting.
git branch feature-greeting

Task-2: Switch to the new branch.
git checkout feature-greeting

Task-3: Add a new function in script.js that displays a personalized greeting.
function sayHello() {
    console.log('Hello, World!');
}

function personalizedGreeting(name) {
    console.log(`Hello, ${name}!`);
}

Task-4: Commit the changes in the feature branch.
git add script.js
git commit -m "Add personalizedGreeting function"


Task-5: Merge feature-greeting into the main branch.
git checkout main
git merge feature-greeting


3.
Task-1: Create a GitHub repository for your JavaScript project.
Go to GitHub and create a new repository named my-js-project.

Task-2: Push your local repository to the GitHub repository.
git remote add origin https://github.com/your-username/my-js-project.git
git push -u origin main

Task-3: Invite a team member to collaborate on the GitHub repository.
Go to your GitHub repository.
Navigate to Settings > Collaborators.
Add your team member's GitHub username.

Task-4: Your team member should clone the repository and make a change.
git clone https://github.com/your-username/my-js-project.git
cd my-js-project

script.js
function sayHello() {
    console.log('Hello, World!');
}

function personalizedGreeting(name) {
    console.log(`Hello, ${name}!`);
}

function farewell(name) {
    console.log(`Goodbye, ${name}!`);
}


Then, they would add and commit the change:
git add script.js
git commit -m "Add farewell function"
git push origin main


Task-5: Fetch and merge the changes made by your team member.
git fetch origin
git merge origin/main


4.
Task-1: Create a new branch named feature-update.
git branch feature-update

Task-2: Switch to the new branch and make changes to script.js.
git checkout feature-update

Edit script.js to make some changes, for example, adding a new function:
function sayHello() {
    console.log('Hello, World!');
}

function personalizedGreeting(name) {
    console.log(`Hello, ${name}!`);
}

function farewell(name) {
    console.log(`Goodbye, ${name}!`);
}

// New function added in feature-update branch
function thankYou(name) {
    console.log(`Thank you, ${name}!`);
}

Task-3: Commit the changes in the feature branch.
git add script.js
git commit -m "Add thankYou function"


Task-4: Switch back to the main branch and make different changes to script.js.
git checkout main

Edit script.js to make different changes, for example, modifying an existing function:
function sayHello() {
    console.log('Hello, World!');
}

function personalizedGreeting(name) {
    console.log(`Hello, ${name}!`);
}

function farewell(name) {
    console.log(`Goodbye, ${name}!`);
}

// Modified farewell function in main branch
function farewell(name) {
    console.log(`See you later, ${name}!`);
}

Task-5: Commit the changes in the main branch.
git add script.js
git commit -m "Modify farewell function"

Task-6: Attempt to merge feature-update into the main branch.
git merge feature-update

If there are conflicts, Git will notify you. Open the script.js file to see the conflicts:
<<<<<<< HEAD
function farewell(name) {
    console.log(`See you later, ${name}!`);
}
=======
function thankYou(name) {
    console.log(`Thank you, ${name}!`);
}
>>>>>>> feature-update

Task-7: Resolve any merge conflicts that occur.
function sayHello() {
    console.log('Hello, World!');
}

function personalizedGreeting(name) {
    console.log(`Hello, ${name}!`);
}

function farewell(name) {
    console.log(`See you later, ${name}!`);
}

// Merged both changes
function thankYou(name) {
    console.log(`Thank you, ${name}!`);
}

git add script.js

git commit -m "Merge feature-update into main with conflict resolution"


5.
Step-1: Create a new file named obsolete.js.
echo "console.log('This file is obsolete.');" > obsolete.js


Step-2: Add and commit the file to the repository.
git add obsolete.js
git commit -m "Add obsolete.js file"


Step-3: Realize that obsolete.js is unnecessary and should be removed.
git rm obsolete.js
git commit -m "Remove obsolete.js file"

Step-4: Undo the last commit where obsolete.js was added.
git log

commit abcdef1 (HEAD -> main)
Author: Your Name <your.email@example.com>
Date:   Mon Jul 29 15:00:00 2024 +0000

    Remove obsolete.js file

commit 1234567
Author: Your Name <your.email@example.com>
Date:   Mon Jul 29 14:55:00 2024 +0000

    Add obsolete.js file


git reset --hard abcdef1









